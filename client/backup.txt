package main

import (
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

func main() {
	cert, err := ioutil.ReadFile("/home/user/go/src/github.com/souravbiswassanto/mutual-tls/cert/ca.crt")
	if err != nil {
		log.Fatalf("could not open certificate file: %v\n", err)
	}
	caCertPool := x509.NewCertPool()
	caCertPool.AppendCertsFromPEM(cert)

	client := http.Client{
		Timeout: time.Minute * 1,
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{
				RootCAs: caCertPool,
			},
		},
	}
	resp, err := client.Get("https://localhost:9090")
	if err != nil {
		log.Fatalf("error making get request %v\n", err)
	}
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("error reading response: %v\n", err)
	}
	fmt.Println(string(body))
}

package main

import (
	"fmt"
	"log"
	"net/http"
)

func main() {
	handler := http.NewServeMux()
	handler.HandleFunc("/", func(writer http.ResponseWriter, request *http.Request) {
		log.Println("New Request -- home directory ")
		fmt.Fprintf(writer, "Hello World\n")
	})
	server := http.Server{
		Addr:    ":9090",
		Handler: handler,
	}
	if err := server.ListenAndServeTLS("/home/user/go/src/github.com/souravbiswassanto/mutual-tls/cert/server.crt", "/home/user/go/src/github.com/souravbiswassanto/mutual-tls/cert/server.key"); err != nil {
		log.Fatalf("error listening to port: %v\n", err)
	}
}
